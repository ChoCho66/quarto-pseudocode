---
title: "Quarto Pseudocode Extension Example"
filters:
  - pseudocode
format:
  # native: default
  html:
    include-in-header:
      text: |
        <script>
        MathJax = {
          loader: {
            load: ['[tex]/boldsymbol']
          },
          tex: {
            tags: "all",
            inlineMath: [['$','$'], ['\\(','\\)']],
            displayMath: [['$$','$$'], ['\\[','\\]']],
            processEscapes: true,
            processEnvironments: true,
            packages: {
              '[+]': ['boldsymbol']
            }
          }
        };
        </script>
        <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js" type="text/javascript"></script>
  pdf:
    # include-in-header:
    #   text: |
    #     \usepackage{xeCJK}
    include-before-body:
      text: |
        \renewcommand{\Return}{\State \textbf{return}~}
        \newcommand{\Print}{\State \textbf{print}~}
        \newcommand{\Break}{\State \textbf{break}}
        \newcommand{\Continue}{\State \textbf{continue}}
        \newcommand{\True}{\textbf{true}}
        \newcommand{\False}{\textbf{false}}
        \renewcommand{\And}{\textbf{and}~}
        \newcommand{\Or}{\textbf{or}~}
        \renewcommand{\Not}{\textbf{not}~}
        \newcommand{\To}{\textbf{to}~}
        \newcommand{\DownTo}{\textbf{downto}~}
    pdf-engine: xelatex
    keep-tex: true
---

We can use a `div` of pseudocode so that we can preview the pseudocode while editing.

![Preview on VSCode](preview_pseudocode.png)

The method is to restore the elements in `div` one by one[^1]. 

[^1]: See `function stringify_el_pseudocode_plain(el)` in `pseudocode_div.lua`

Here's how to use it:

- The original 
  ````markdown
  ```pseudocode
  ```
  ````
  should be replaced with
  ````markdown
  ::: {.pseudocode}
  :::
  ````

- There is no need to use `\begin{algorithm}`, `\begin{algorithmic}`, and `\caption{bla bla}` should be changed to `#### bla bla`.

- The content should be formatted as an unordered list.

- There is no need to use `\State`.

- `\For`, `\If`, `\EndIf`, `\Procedure` should be changed to `**For**`, `**If**`, `**Procedure**` and the content following these should not be enclosed in parentheses.
  - Here, the first letter of `\For`, `\If` should be capitalized, and the `If` in `\EndIf` should be capitalized.

- `\Call{Partition}{$A,p,r$}` should be changed to `[**Partition**$(A,p,r)$](Call)`.


## Some restrictions

- If the caption is to be blank, `####` is required.
- `#### caption` and `#| html-line-number: true` must leave a blank line.
- The unordered list here cannot span lines, and each sentence cannot have a new line.
  For example
  ````markdown
  ::: {.pseudocode}

  ####
  - bla bla.
  - bla bla.
  :::
  ````
  It **cannot** be the following two types
  ````markdown
  ::: {.pseudocode}

  ####
  - bla bla.

  - bla bla.
  :::
  ````
  ````markdown
  ::: {.pseudocode}

  ####
  - bla
    bla.
  - bla bla.
  :::
  ````


# Examples

## Empty Caption

If we desire an empty caption, we must include an empty `####`.

::: {.pseudocode}

#### 

- $f(x) = y$
:::


## Function, Procedure and Call

::: {.pseudocode}
#| html-line-number: true
#| html-line-number-punc: ":"
#| pdf-line-number: true
#| pdf-placement: "H"

#### Quicksort
- **Function** **Quicksort**$(A,p,r)$
  - **If** $p<r$
    - $q=$ [**Partition**$(A,p,r)$](Call)
    - [**Partition**$(A,p,q-1)$](Call)
    - [**Partition**$(A,q+1,r)$](Call)
  - **EndIf**
- **EndFunction**
- **Procedure** **Partition**$(a,p,r)$
  - $x=A[r]$
  - $i=p-1$
  - **For** $j=p$ **to** $r-1$
    - **If** $A[j]<x$
      - $i=i+1$
      - exchange $A[i]$ with $A[j]$
    - **EndIf**
    - exchange $A[i]$ with $A[r]$
  - **EndFor**
- **EndProcedure**
:::

## Comment

If you want to use a comment (`<!-- comment -->`), you need to leave a blank line above and below the comment.

::: {.pseudocode}
#| html-comment-delimiter: "▷"
#| html-line-number: true
#| html-line-number-punc: ":"
#| pdf-line-number: true
#| pdf-placement: "H"

####

<!-- comment here ! -->

- **Function** **Quicksort**$(A,p,r)$
  - **If** $p<r$
    - $q=$ [**Partition**$(A,p,r)$](Call)
    - [**Partition**$(A,p,q-1)$](Call)
    - [**Partition**$(A,q+1,r)$](Call)

    <!-- comment here ! -->

  - **EndIf**
- **EndFunction**
:::

# The examples of `simple/simple.qmd`

## Test control blocks

Test control blocks is shown as @alg-test-control-blocks-part-1 and @alg-test-control-blocks-part-2.

::: {.pseudocode}
#| label: alg-test-control-blocks-part-1
#| pdf-placement: "H"

#### Test control blocks - Part 1

- **Procedure** **Test-If**
  - **If** cond0
    - block0
  - **ElsIf** cond1
    - block1
  - **Else**
    - block2
  - **EndIf**
- **EndProcedure**
- **Procedure** **Test-For**$(n)$
  - $i \gets 0$
  - **For** $i < n$
    - **Print** $i$
    - $i \gets i + 1$
  - **EndFor**
- **EndProcedure**
- **Procedure** **Test-For-To**$(n)$
  - $i \gets 0$
  - **For** $i$ **to** $n$
    - **Print** $i$
  - **EndFor**
- **EndProcedure**
- **Procedure** **Test-For-DownTo**$(n)$
  - **For** $i \gets n$ **downto** $0$
    - **Print** $i$
  - **EndFor**
- **EndProcedure**
- **Procedure** **Test-For-All**$(n)$
  - **ForAll** $i \in \{0, 1, \cdots, n\}$
    - **Print** $i$
  - **EndFor**
- **EndProcedure**
:::

::: {.pseudocode}
#| label: alg-test-control-blocks-part-2
#| pdf-placement: "H"

#### Test control blocks - Part 2
- **Procedure** **Test-While**$(n)$
  - $i \gets 0$
  - **While** $i < n$
    - **Print** $i$
    - $i \gets i + 1$
  - **EndWhile**
- **EndProcedure**
- **Procedure** **Test-Repeat**$(n)$
  - $i \gets 0$
  - **Repeat**
    - **Print** $i$
    - $i \gets i + 1$
  - **Until** $i>n$
- **EndProcedure**
- **Procedure** **Test-Break-Continue**$(n)$
  - **For** $i = 0$ **to** $2n$
    - **If** $i < n/2$
      - **Continue**
    - **ElsIf** $i > n$
      - **Break**
    - **EndIf**
    - **Print** $i$
  - **EndFor**
- **EndProcedure**
:::

## Test statements and comments

Test statements and comments is shown as @alg-test-statements-and-comments.

::: {.pseudocode}
#| label: alg-test-statements-and-comments
#| pdf-placement: "H"

#### Test statements and comments
- **Procedure** **Test-Statements**
  - This line is a normal statement
  - **Print** this is print statement
  - **Return** $retval$
- **EndProcedure**
- **Procedure** **Test-Comments**
  - **Comment** comment for Procedure
  - a statement 
    - **Comment** inline comment
  - $\quad$
    - **Comment** line comment
  - **If** some condition
    - **Comment** comment for if
    - **Return** **true**
      - **Comment** another inline comment
  - **Else** 
    - **Comment** comment for else
    - **Return** **false**
      - **Comment** yet another inline comment
  - **EndIf**
- **EndProcedure**
:::

## Test pseudocode in custom block

:::: {.content-visible when-format="html"}
::: {.pseudocode}
#| label: alg-test-content-visible-html
#| pdf-placement: "H"

#### Test content visible
- **Procedure** **Test-Content-Visible**
  - ONLY IN HTML FORMAT
- **EndProcedure**
:::
::::

:::: {.content-visible when-format="pdf"}
::: {.pseudocode}
#| label: alg-test-content-visible-pdf
#| pdf-placement: "H"

#### Test content visible
- **Procedure** **Test-Content-Visible**
  - ONLY IN PDF FORMAT
- **EndProcedure**
:::
::::

:::: {.callout-note}
::: {.pseudocode}
#| label: alg-test-callout
#| pdf-placement: "H"

#### Test callout
- **Procedure** **Test-Callout**
  - CALLOUT TEST
- **EndProcedure**
:::
::::

## DDPM

::: {.pseudocode}
#| label: DDPM2
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "▷"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

#### Training (DDPM)

- **Repeat**
  - $t\sim \text{Uniform}(\lbrace 1,\cdots,T \rbrace)$
    - **Comment** Sample random step
  - $x_0\sim q(x_0)$
    - **Comment** Sample random initial image
  - $\overline{\varepsilon}_t\sim \mathcal{N}(\mathbf{0},\mathbf{I})$
    - **Comment** Sample random noise
  - $x_t = \sqrt{\overline{\alpha}_t}x_0 + \sqrt{1-\overline{\alpha}_t}\cdot \overline{\varepsilon}_t$ 
  - Take gradient descent step on $\Bigl\lVert \overline{\varepsilon}_t - \mathtt{Net}_{\theta}(x_t,t) \Bigr\rVert^2$
    - **Comment** Optimization
- **Until** converged
:::